// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Q191/GTerm/backend/dal/model"
)

func newCredential(db *gorm.DB, opts ...gen.DOOption) credential {
	_credential := credential{}

	_credential.credentialDo.UseDB(db, opts...)
	_credential.credentialDo.UseModel(&model.Credential{})

	tableName := _credential.credentialDo.TableName()
	_credential.ALL = field.NewAsterisk(tableName)
	_credential.ID = field.NewUint(tableName, "id")
	_credential.CreatedAt = field.NewTime(tableName, "created_at")
	_credential.UpdatedAt = field.NewTime(tableName, "updated_at")
	_credential.DeletedAt = field.NewField(tableName, "deleted_at")
	_credential.Label = field.NewString(tableName, "label")
	_credential.Username = field.NewString(tableName, "username")
	_credential.IsCommonCredential = field.NewBool(tableName, "is_common_credential")
	_credential.AuthMethod = field.NewString(tableName, "auth_method")
	_credential.PasswordCiphertext = field.NewString(tableName, "password_ciphertext")
	_credential.PasswordSalt = field.NewString(tableName, "password_salt")
	_credential.PrivateKeyCiphertext = field.NewString(tableName, "private_key_ciphertext")
	_credential.PrivateKeySalt = field.NewString(tableName, "private_key_salt")
	_credential.PassphraseCiphertext = field.NewString(tableName, "passphrase_ciphertext")
	_credential.PassphraseSalt = field.NewString(tableName, "passphrase_salt")

	_credential.fillFieldMap()

	return _credential
}

type credential struct {
	credentialDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	Label                field.String
	Username             field.String
	IsCommonCredential   field.Bool
	AuthMethod           field.String
	PasswordCiphertext   field.String
	PasswordSalt         field.String
	PrivateKeyCiphertext field.String
	PrivateKeySalt       field.String
	PassphraseCiphertext field.String
	PassphraseSalt       field.String

	fieldMap map[string]field.Expr
}

func (c credential) Table(newTableName string) *credential {
	c.credentialDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c credential) As(alias string) *credential {
	c.credentialDo.DO = *(c.credentialDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *credential) updateTableName(table string) *credential {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Label = field.NewString(table, "label")
	c.Username = field.NewString(table, "username")
	c.IsCommonCredential = field.NewBool(table, "is_common_credential")
	c.AuthMethod = field.NewString(table, "auth_method")
	c.PasswordCiphertext = field.NewString(table, "password_ciphertext")
	c.PasswordSalt = field.NewString(table, "password_salt")
	c.PrivateKeyCiphertext = field.NewString(table, "private_key_ciphertext")
	c.PrivateKeySalt = field.NewString(table, "private_key_salt")
	c.PassphraseCiphertext = field.NewString(table, "passphrase_ciphertext")
	c.PassphraseSalt = field.NewString(table, "passphrase_salt")

	c.fillFieldMap()

	return c
}

func (c *credential) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *credential) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["label"] = c.Label
	c.fieldMap["username"] = c.Username
	c.fieldMap["is_common_credential"] = c.IsCommonCredential
	c.fieldMap["auth_method"] = c.AuthMethod
	c.fieldMap["password_ciphertext"] = c.PasswordCiphertext
	c.fieldMap["password_salt"] = c.PasswordSalt
	c.fieldMap["private_key_ciphertext"] = c.PrivateKeyCiphertext
	c.fieldMap["private_key_salt"] = c.PrivateKeySalt
	c.fieldMap["passphrase_ciphertext"] = c.PassphraseCiphertext
	c.fieldMap["passphrase_salt"] = c.PassphraseSalt
}

func (c credential) clone(db *gorm.DB) credential {
	c.credentialDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c credential) replaceDB(db *gorm.DB) credential {
	c.credentialDo.ReplaceDB(db)
	return c
}

type credentialDo struct{ gen.DO }

type ICredentialDo interface {
	gen.SubQuery
	Debug() ICredentialDo
	WithContext(ctx context.Context) ICredentialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICredentialDo
	WriteDB() ICredentialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICredentialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICredentialDo
	Not(conds ...gen.Condition) ICredentialDo
	Or(conds ...gen.Condition) ICredentialDo
	Select(conds ...field.Expr) ICredentialDo
	Where(conds ...gen.Condition) ICredentialDo
	Order(conds ...field.Expr) ICredentialDo
	Distinct(cols ...field.Expr) ICredentialDo
	Omit(cols ...field.Expr) ICredentialDo
	Join(table schema.Tabler, on ...field.Expr) ICredentialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICredentialDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICredentialDo
	Group(cols ...field.Expr) ICredentialDo
	Having(conds ...gen.Condition) ICredentialDo
	Limit(limit int) ICredentialDo
	Offset(offset int) ICredentialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICredentialDo
	Unscoped() ICredentialDo
	Create(values ...*model.Credential) error
	CreateInBatches(values []*model.Credential, batchSize int) error
	Save(values ...*model.Credential) error
	First() (*model.Credential, error)
	Take() (*model.Credential, error)
	Last() (*model.Credential, error)
	Find() ([]*model.Credential, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Credential, err error)
	FindInBatches(result *[]*model.Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Credential) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICredentialDo
	Assign(attrs ...field.AssignExpr) ICredentialDo
	Joins(fields ...field.RelationField) ICredentialDo
	Preload(fields ...field.RelationField) ICredentialDo
	FirstOrInit() (*model.Credential, error)
	FirstOrCreate() (*model.Credential, error)
	FindByPage(offset int, limit int) (result []*model.Credential, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICredentialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c credentialDo) Debug() ICredentialDo {
	return c.withDO(c.DO.Debug())
}

func (c credentialDo) WithContext(ctx context.Context) ICredentialDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c credentialDo) ReadDB() ICredentialDo {
	return c.Clauses(dbresolver.Read)
}

func (c credentialDo) WriteDB() ICredentialDo {
	return c.Clauses(dbresolver.Write)
}

func (c credentialDo) Session(config *gorm.Session) ICredentialDo {
	return c.withDO(c.DO.Session(config))
}

func (c credentialDo) Clauses(conds ...clause.Expression) ICredentialDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c credentialDo) Returning(value interface{}, columns ...string) ICredentialDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c credentialDo) Not(conds ...gen.Condition) ICredentialDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c credentialDo) Or(conds ...gen.Condition) ICredentialDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c credentialDo) Select(conds ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c credentialDo) Where(conds ...gen.Condition) ICredentialDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c credentialDo) Order(conds ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c credentialDo) Distinct(cols ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c credentialDo) Omit(cols ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c credentialDo) Join(table schema.Tabler, on ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c credentialDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c credentialDo) RightJoin(table schema.Tabler, on ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c credentialDo) Group(cols ...field.Expr) ICredentialDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c credentialDo) Having(conds ...gen.Condition) ICredentialDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c credentialDo) Limit(limit int) ICredentialDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c credentialDo) Offset(offset int) ICredentialDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c credentialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICredentialDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c credentialDo) Unscoped() ICredentialDo {
	return c.withDO(c.DO.Unscoped())
}

func (c credentialDo) Create(values ...*model.Credential) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c credentialDo) CreateInBatches(values []*model.Credential, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c credentialDo) Save(values ...*model.Credential) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c credentialDo) First() (*model.Credential, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credential), nil
	}
}

func (c credentialDo) Take() (*model.Credential, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credential), nil
	}
}

func (c credentialDo) Last() (*model.Credential, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credential), nil
	}
}

func (c credentialDo) Find() ([]*model.Credential, error) {
	result, err := c.DO.Find()
	return result.([]*model.Credential), err
}

func (c credentialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Credential, err error) {
	buf := make([]*model.Credential, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c credentialDo) FindInBatches(result *[]*model.Credential, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c credentialDo) Attrs(attrs ...field.AssignExpr) ICredentialDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c credentialDo) Assign(attrs ...field.AssignExpr) ICredentialDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c credentialDo) Joins(fields ...field.RelationField) ICredentialDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c credentialDo) Preload(fields ...field.RelationField) ICredentialDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c credentialDo) FirstOrInit() (*model.Credential, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credential), nil
	}
}

func (c credentialDo) FirstOrCreate() (*model.Credential, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Credential), nil
	}
}

func (c credentialDo) FindByPage(offset int, limit int) (result []*model.Credential, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c credentialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c credentialDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c credentialDo) Delete(models ...*model.Credential) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *credentialDo) withDO(do gen.Dao) *credentialDo {
	c.DO = *do.(*gen.DO)
	return c
}
